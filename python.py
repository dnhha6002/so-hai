# --- Giao di·ªán v√† Lu·ªìng ch√≠nh ---

# L·∫•y API Key
api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
     st.error("‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")

uploaded_file = st.file_uploader(
    "1. T·∫£i file Word (.docx) ch·ª©a Ph∆∞∆°ng √°n Kinh doanh:",
    type=['docx']
)

# Kh·ªüi t·∫°o state ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t
if 'extracted_data' not in st.session_state:
    st.session_state['extracted_data'] = None

# --- Ch·ª©c nƒÉng 1: L·ªçc d·ªØ li·ªáu b·∫±ng AI ---
if uploaded_file is not None:
    doc_text = read_docx_file(uploaded_file)
    
    if st.button("Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh b·∫±ng AI ü§ñ"):
        if api_key:
            with st.spinner('ƒêang ƒë·ªçc v√† tr√≠ch xu·∫•t th√¥ng s·ªë t√†i ch√≠nh b·∫±ng Gemini...'):
                try:
                    st.session_state['extracted_data'] = extract_financial_data(doc_text, api_key)
                    st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")
                except APIError:
                    st.error("L·ªói API: Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c x√°c th·ª±c API Key.")
                except Exception as e:
                    st.error(f"L·ªói tr√≠ch xu·∫•t: {e}")
        else:
            st.error("Vui l√≤ng cung c·∫•p Kh√≥a API.")

# --- Hi·ªÉn th·ªã v√† T√≠nh to√°n (Y√™u c·∫ßu 2 & 3) ---
if st.session_state['extracted_data'] is not None:
    data = st.session_state['extracted_data']
    
    # ****************** L·ªçc c√°c gi√° tr·ªã s·ªë v√† x·ª≠ l√Ω ngo·∫°i l·ªá ******************
    try:
        initial_investment = float(data.get('V·ªën ƒë·∫ßu t∆∞', 0))
        project_life = int(data.get('D√≤ng ƒë·ªùi d·ª± √°n', 0))
        annual_revenue = float(data.get('Doanh thu h√†ng nƒÉm', 0))
        annual_cost = float(data.get('Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm', 0))
        wacc = float(data.get('WACC', 0.1)) # Gi·∫£ ƒë·ªãnh WACC 10% n·∫øu kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c
        tax_rate = float(data.get('Thu·∫ø su·∫•t', 0.2)) # Gi·∫£ ƒë·ªãnh Thu·∫ø 20% n·∫øu kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c
        
        # ƒê·∫£m b·∫£o WACC v√† Thu·∫ø su·∫•t ·ªü d·∫°ng th·∫≠p ph√¢n (0 < value < 1)
        if wacc > 1: wacc /= 100
        if tax_rate > 1: tax_rate /= 100
        
    except Exception as e:
        st.error(f"L·ªói chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu tr√≠ch xu·∫•t th√†nh s·ªë: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi dung file Word.")
        initial_investment, project_life, wacc, tax_rate = 0, 0, 0.1, 0.2

    # ****************** Hi·ªÉn th·ªã Th√¥ng s·ªë ******************
    st.subheader("2. C√°c Th√¥ng s·ªë D·ª± √°n ƒë√£ Tr√≠ch xu·∫•t")
    
    col1, col2, col3 = st.columns(3)
    col1.metric("V·ªën ƒê·∫ßu t∆∞ (C‚ÇÄ)", f"{initial_investment:,.0f} VNƒê")
    col2.metric("D√≤ng ƒë·ªùi d·ª± √°n (N)", f"{project_life:.0f} nƒÉm")
    col3.metric("WACC (k)", f"{wacc:.2%}")
    col1.metric("Doanh thu H√†ng nƒÉm (R)", f"{annual_revenue:,.0f} VNƒê")
    col2.metric("Chi ph√≠ Hƒê H√†ng nƒÉm (C)", f"{annual_cost:,.0f} VNƒê")
    col3.metric("Thu·∫ø su·∫•t (t)", f"{tax_rate:.2%}")

    st.markdown("---")
    
    # ****************** B·∫£ng D√≤ng ti·ªÅn (Y√™u c·∫ßu 2) ******************
    st.subheader("3. B·∫£ng D√≤ng ti·ªÅn (Cash Flow)")
    
    if project_life > 0 and initial_investment >= 0:
        try:
            depreciation = initial_investment / project_life 
        except ZeroDivisionError:
            depreciation = 0

        years = np.arange(1, project_life + 1)
        
        # T√≠nh to√°n d√≤ng ti·ªÅn h√†ng nƒÉm (Gi·∫£ ƒë·ªãnh ƒë∆°n gi·∫£n: d√≤ng ti·ªÅn ƒë·ªÅu)
        EBT = annual_revenue - annual_cost - depreciation
        Tax = EBT * tax_rate if EBT > 0 else 0
        EAT = EBT - Tax
        # D√≤ng ti·ªÅn thu·∫ßn = L·ª£i nhu·∫≠n sau thu·∫ø + Kh·∫•u hao
        CF = EAT + depreciation
        
        cashflow_data = {
            'NƒÉm': years,
            'Doanh thu (R)': [annual_revenue] * project_life,
            'Chi ph√≠ Hƒê (C)': [annual_cost] * project_life,
            'Kh·∫•u hao (D)': [depreciation] * project_life,
            'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)': [EBT] * project_life,
            'Thu·∫ø (Tax)': [Tax] * project_life,
            'L·ª£i nhu·∫≠n sau thu·∫ø (EAT)': [EAT] * project_life,
            'D√≤ng ti·ªÅn thu·∫ßn (CF)': [CF] * project_life
        }
        
        df_cashflow = pd.DataFrame(cashflow_data)
        
        st.dataframe(
            df_cashflow.style.format({
                col: '{:,.0f}' for col in df_cashflow.columns if col not in ['NƒÉm']
            }), 
            use_container_width=True
        )

        st.markdown("---")
        
        # ****************** T√≠nh to√°n Ch·ªâ s·ªë (Y√™u c·∫ßu 3) ******************
st.subheader("4. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
if wacc > 0:
            try:
                npv, irr, pp, dpp = calculate_project_metrics(df_cashflow, initial_investment, wacc)
                
                metrics_data = {
                    'NPV': npv,
                    'IRR': irr if not np.isnan(irr) else 0, # D√πng 0 ƒë·ªÉ tr√°nh l·ªói format
                    'PP': pp,
                    'DPP': dpp
                }
                
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i thu·∫ßn)", f"{npv:,.0f} VNƒê", delta=("D·ª± √°n c√≥ l·ªùi" if npv > 0 else "D·ª± √°n l·ªó"))
                col2.metric("IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi t·∫°i)", f"{irr:.2%}" if not np.isnan(irr) else "Kh√¥ng t√≠nh ƒë∆∞·ª£c")
                col3.metric("PP (Th·ªùi gian ho√†n v·ªën)", f"{pp:.2f} nƒÉm" if isinstance(pp, float) or isinstance(pp, np.float64) else pp)
                col4.metric("DPP (Ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)", f"{dpp:.2f} nƒÉm" if isinstance(dpp, float) or isinstance(dpp, np.float64) else dpp)

                # ****************** Ph√¢n t√≠ch AI (Y√™u c·∫ßu 4) ******************
                st.markdown("---")
                st.subheader("5. Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n (AI)")
                
                if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë üß†"):
                    if api_key:
                        with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                            ai_result = get_ai_evaluation(metrics_data, wacc, api_key)
                            st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                            st.info(ai_result)
                    else:
                         st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh Secrets.")

            except Exception as e:
                st.error(f"C√≥ l·ªói x·∫£y ra khi t√≠nh to√°n ch·ªâ s·ªë: {e}. Vui l√≤ng ki·ªÉm tra c√°c th√¥ng s·ªë ƒë·∫ßu v√†o.")
        else:
            st.warning("WACC (T·ª∑ l·ªá chi·∫øt kh·∫•u) ph·∫£i l·ªõn h∆°n 0 ƒë·ªÉ t√≠nh to√°n NPV v√† DPP.")

    else:
        st.warning("Vui l√≤ng ƒë·∫£m b·∫£o D√≤ng ƒë·ªùi D·ª± √°n v√† V·ªën ƒê·∫ßu t∆∞ ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t th√†nh c√¥ng v√† c√≥ gi√° tr·ªã l·ªõn h∆°n 0.")

else:
    st.info("Vui l√≤ng t·∫£i l√™n file Word v√† nh·∫•n n√∫t 'Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh b·∫±ng AI' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

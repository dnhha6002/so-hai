# app.py

import streamlit as st
import pandas as pd
import numpy as np
from google import genai
from google.genai.errors import APIError
from docx import Document
import io
import json

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh (NPV, IRR)",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh üí∞")
st.caption("S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin t·ª´ file Word v√† ph√¢n t√≠ch hi·ªáu qu·∫£ d·ª± √°n.")

# --- Thi·∫øt l·∫≠p Kh√≥a API ---
# Kh√≥a API n√™n ƒë∆∞·ª£c l∆∞u tr·ªØ trong Streamlit Secrets (secrets.toml)
try:
    API_KEY = st.secrets["GEMINI_API_KEY"]
except KeyError:
    API_KEY = None
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

# --- H√ÄM 1: TR√çCH XU·∫§T D·ªÆ LI·ªÜU T·ª™ WORD B·∫∞NG AI (Task 1) ---
def extract_data_from_docx(uploaded_file, api_key):
    """
    Tr√≠ch xu·∫•t n·ªôi dung vƒÉn b·∫£n t·ª´ file Word v√† s·ª≠ d·ª•ng Gemini AI ƒë·ªÉ l·ªçc c√°c ch·ªâ s·ªë t√†i ch√≠nh.
    K·∫øt qu·∫£ mong mu·ªën l√† m·ªôt chu·ªói JSON.
    """
    if not api_key:
        return None, "L·ªói API: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY."

    try:
        # 1. ƒê·ªçc n·ªôi dung t·ª´ file Word
        docx_file = io.BytesIO(uploaded_file.getvalue())
        document = Document(docx_file)
        full_text = []
        for para in document.paragraphs:
            full_text.append(para.text)
        text_content = "\n".join(full_text)
        
        if not text_content:
            return None, "File Word kh√¥ng c√≥ n·ªôi dung."

        # 2. X√¢y d·ª±ng Prompt cho Gemini
        # Y√™u c·∫ßu AI tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON (s·ª≠ d·ª•ng response_schema)
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        # ƒê·ªãnh nghƒ©a c·∫•u tr√∫c JSON mong mu·ªën
        schema = {
            "type": "object",
            "properties": {
                "V·ªën ƒë·∫ßu t∆∞": {"type": "number", "description": "T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (nƒÉm 0)."},
                "D√≤ng ƒë·ªùi d·ª± √°n": {"type": "integer", "description": "S·ªë nƒÉm ho·∫°t ƒë·ªông c·ªßa d·ª± √°n."},
                "Doanh thu h√†ng nƒÉm": {"type": "array", "items": {"type": "number"}, "description": "Doanh thu d·ª± ki·∫øn h√†ng nƒÉm."},
                "Chi ph√≠ ho·∫°t ƒë·ªông": {"type": "array", "items": {"type": "number"}, "description": "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (ch∆∞a bao g·ªìm Kh·∫•u hao)."},
                "Kh·∫•u hao": {"type": "number", "description": "Chi ph√≠ kh·∫•u hao h√†ng nƒÉm (gi·∫£ ƒë·ªãnh ƒë·ªÅu)."},
                "WACC": {"type": "number", "description": "Chi ph√≠ v·ªën b√¨nh qu√¢n gia quy·ªÅn (d·∫°ng th·∫≠p ph√¢n, v√≠ d·ª• 0.12 cho 12%)."},
                "Thu·∫ø su·∫•t": {"type": "number", "description": "Thu·∫ø su·∫•t thu nh·∫≠p doanh nghi·ªáp (d·∫°ng th·∫≠p ph√¢n, v√≠ d·ª• 0.20 cho 20%)."}
            },
            "required": ["V·ªën ƒë·∫ßu t∆∞", "D√≤ng ƒë·ªùi d·ª± √°n", "Doanh thu h√†ng nƒÉm", "Chi ph√≠ ho·∫°t ƒë·ªông", "Kh·∫•u hao", "WACC", "Thu·∫ø su·∫•t"]
        }

        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y ƒë·ªçc n·ªôi dung vƒÉn b·∫£n d∆∞·ªõi ƒë√¢y v√† tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh ch√≠nh c·ªßa d·ª± √°n kinh doanh, ƒë·∫∑c bi·ªát l√† c√°c th√¥ng s·ªë li√™n quan ƒë·∫øn d√≤ng ti·ªÅn v√† ƒë√°nh gi√° d·ª± √°n.
        
        N·∫øu d·ª± √°n c√≥ d√≤ng ƒë·ªùi 5 nƒÉm, th√¨ 'Doanh thu h√†ng nƒÉm' v√† 'Chi ph√≠ ho·∫°t ƒë·ªông' ph·∫£i l√† m·ªôt m·∫£ng 5 gi√° tr·ªã t∆∞∆°ng ·ª©ng cho 5 nƒÉm. N·∫øu vƒÉn b·∫£n ch·ªâ ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt gi√° tr·ªã chung, h√£y l·∫∑p l·∫°i gi√° tr·ªã ƒë√≥ trong m·∫£ng.
        
        N·ªòI DUNG VƒÇN B·∫¢N:
        ---
        {text_content}
        ---
        
        H√£y tr·∫£ l·ªùi b·∫±ng **DUY NH·∫§T** m·ªôt ƒë·ªëi t∆∞·ª£ng JSON tu√¢n th·ªß schema ƒë√£ cho.
        """
        
        response = client.models.generate_content(
            model=model_name,
            contents=prompt,
            config={"response_mime_type": "application/json", "response_schema": schema}
        )
        
        # Chuy·ªÉn ƒë·ªïi chu·ªói JSON k·∫øt qu·∫£ th√†nh Dict
        extracted_data = json.loads(response.text)
        return extracted_data, "Tr√≠ch xu·∫•t th√†nh c√¥ng."

    except APIError as e:
        return None, f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return None, f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω file Word ho·∫∑c JSON: {e}"

# --- H√ÄM 2: X√ÇY D·ª∞NG B·∫¢NG D√íNG TI·ªÄN (Task 2) ---
def build_cash_flow_table(data):
    """X√¢y d·ª±ng DataFrame d√≤ng ti·ªÅn c·ªßa d·ª± √°n."""
    T = data['D√≤ng ƒë·ªùi d·ª± √°n']
    years = np.arange(T + 1)
    
    # Kh·ªüi t·∫°o DataFrame
    df = pd.DataFrame({'NƒÉm': years})
    df.set_index('NƒÉm', inplace=True)
    
    # 1. Chi ph√≠ ƒê·∫ßu t∆∞ Ban ƒë·∫ßu (NƒÉm 0)
    df['ƒê·∫ßu t∆∞ Ban ƒë·∫ßu'] = 0.0
    df.loc[0, 'ƒê·∫ßu t∆∞ Ban ƒë·∫ßu'] = -data['V·ªën ƒë·∫ßu t∆∞']
    
    # 2. D√≤ng ti·ªÅn Ho·∫°t ƒë·ªông (NƒÉm 1 ƒë·∫øn T)
    
    # T·∫°o m·∫£ng v·ªõi gi√° tr·ªã Doanh thu v√† Chi ph√≠
    doanh_thu_arr = np.array(data['Doanh thu h√†ng nƒÉm'])
    chi_phi_arr = np.array(data['Chi ph√≠ ho·∫°t ƒë·ªông'])
    
    # Doanh thu v√† Chi ph√≠ b·∫Øt ƒë·∫ßu t·ª´ NƒÉm 1
    df['Doanh thu'] = [0.0] + doanh_thu_arr.tolist()
    df['Chi ph√≠ Hƒê'] = [0.0] + chi_phi_arr.tolist()
    
    # Gi·∫£ ƒë·ªãnh Kh·∫•u hao ƒë·ªÅu h√†ng nƒÉm
    khau_hao = data['Kh·∫•u hao']
    df['Kh·∫•u hao'] = 0.0
    df.loc[1:T, 'Kh·∫•u hao'] = khau_hao
    
    # 3. T√≠nh L·ª£i nhu·∫≠n tr∆∞·ªõc Thu·∫ø (EBT)
    df['EBT'] = df['Doanh thu'] - df['Chi ph√≠ Hƒê'] - df['Kh·∫•u hao']
    
    # 4. Thu·∫ø TNDN
    thue_suat = data['Thu·∫ø su·∫•t']
    # Thu·∫ø ch·ªâ t√≠nh khi EBT > 0
    df['Thu·∫ø'] = np.where(df['EBT'] > 0, -df['EBT'] * thue_suat, 0)
    
    # 5. L·ª£i nhu·∫≠n sau Thu·∫ø (EAT)
    df['EAT'] = df['EBT'] + df['Thu·∫ø'] # EBT - Thu·∫ø (Thu·∫ø ƒë√£ l√† s·ªë √¢m)
    
    # 6. D√≤ng ti·ªÅn R√≤ng (CF)
    # CF = EAT + Kh·∫•u hao + ƒê·∫ßu t∆∞ ban ƒë·∫ßu
    df['D√≤ng ti·ªÅn R√≤ng (CF)'] = df['EAT'] + df['Kh·∫•u hao'] + df['ƒê·∫ßu t∆∞ Ban ƒë·∫ßu']
    
    # X√≥a c√°c c·ªôt trung gian ƒë·ªÉ b·∫£ng CF g·ªçn g√†ng
    df_cf = df[['D√≤ng ti·ªÅn R√≤ng (CF)']].copy()
    
    return df_cf, df # Tr·∫£ v·ªÅ c·∫£ b·∫£ng ƒë·∫ßy ƒë·ªß ƒë·ªÉ t√≠nh to√°n sau n√†y

# --- H√ÄM 3: T√çNH C√ÅC CH·ªà S·ªê (Task 3) ---
def calculate_project_metrics(df_cf, WACC):
    """T√≠nh NPV, IRR, PP v√† DPP."""
    cash_flows = df_cf['D√≤ng ti·ªÅn R√≤ng (CF)'].values
    T = len(cash_flows) - 1 # D√≤ng ƒë·ªùi d·ª± √°n
    
    # 1. NPV (Net Present Value)
    npv_value = np.npv(WACC, cash_flows)
    
    # 2. IRR (Internal Rate of Return)
    try:
        irr_value = np.irr(cash_flows)
    except ValueError:
        irr_value = np.nan # D√≤ng ti·ªÅn kh√¥ng thay ƒë·ªïi d·∫•u (th∆∞·ªùng l√† l·ªói)
        
    # 3. PP (Payback Period - Th·ªùi gian Ho√†n v·ªën)
    cumulative_cf = np.cumsum(cash_flows)
    
    # NƒÉm m√† Cumulative CF chuy·ªÉn t·ª´ √¢m sang d∆∞∆°ng
    payback_year_index = np.where(cumulative_cf > 0)[0]
    
    if len(payback_year_index) > 0:
        payback_year = payback_year_index[0]
        # C√¥ng th·ª©c N·ªôi suy: PP = NƒÉm_ho√†n_v·ªën_tr∆∞·ªõc + |CF t√≠ch l≈©y tr∆∞·ªõc| / CF nƒÉm ho√†n v·ªën
        if payback_year == 0:
            pp_value = 0.0 # Ho√†n v·ªën ngay nƒÉm 0
        else:
            cf_before = cumulative_cf[payback_year - 1]
            cf_at_payback_year = cash_flows[payback_year]
            pp_value = (payback_year - 1) + abs(cf_before) / cf_at_payback_year
    else:
        pp_value = T + 1 # Kh√¥ng ho√†n v·ªën trong d√≤ng ƒë·ªùi d·ª± √°n
        
    # 4. DPP (Discounted Payback Period - Th·ªùi gian Ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    discount_factors = 1 / (1 + WACC)**np.arange(T + 1)
    discounted_cf = cash_flows * discount_factors
    cumulative_dcf = np.cumsum(discounted_cf)
    
    dpp_payback_year_index = np.where(cumulative_dcf > 0)[0]
    
    if len(dpp_payback_year_index) > 0:
        dpp_payback_year = dpp_payback_year_index[0]
        if dpp_payback_year == 0:
            dpp_value = 0.0
        else:
            dcf_before = cumulative_dcf[dpp_payback_year - 1]
            dcf_at_payback_year = discounted_cf[dpp_payback_year]
            dpp_value = (dpp_payback_year - 1) + abs(dcf_before) / dcf_at_payback_year
    else:
        dpp_value = T + 1 # Kh√¥ng ho√†n v·ªën c√≥ chi·∫øt kh·∫•u
        
    metrics = {
        'NPV': npv_value,
        'IRR': irr_value,
        'PP': pp_value,
        'DPP': dpp_value
    }
    
    return metrics

# --- H√ÄM 4: PH√ÇN T√çCH CH·ªà S·ªê B·ªûI AI (Task 4) ---
def analyze_metrics(metrics, project_life, WACC, api_key):
    """S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ ph√¢n t√≠ch c√°c ch·ªâ s·ªë ƒë√°nh gi√° d·ª± √°n."""
    if not api_key:
        return "L·ªói API: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY."

    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'

        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch ƒë·∫ßu t∆∞ t√†i ch√≠nh. H√£y ƒë√°nh gi√° t√≠nh kh·∫£ thi c·ªßa d·ª± √°n d·ª±a tr√™n c√°c ch·ªâ s·ªë sau. 
        ƒê∆∞a ra nh·∫≠n x√©t kh√°ch quan, ng·∫Øn g·ªçn (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ vi·ªác c√≥ n√™n ch·∫•p nh·∫≠n d·ª± √°n n√†y hay kh√¥ng.
        
        C√°c ti√™u ch√≠ ƒë√°nh gi√°:
        - Ch·∫•p nh·∫≠n n·∫øu: NPV > 0 v√† IRR > WACC.
        - Khuy·∫øn ngh·ªã: PP v√† DPP c√†ng ng·∫Øn c√†ng t·ªët (n√™n ng·∫Øn h∆°n 50% D√≤ng ƒë·ªùi d·ª± √°n).
        
        Th√¥ng s·ªë d·ª± √°n:
        - D√≤ng ƒë·ªùi d·ª± √°n: {project_life} nƒÉm
        - WACC (T·ª∑ su·∫•t chi·∫øt kh·∫•u): {WACC * 100:.2f}%
        - NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng): {metrics['NPV']:,.0f}
        - IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô): {metrics['IRR'] * 100:.2f}%
        - PP (Th·ªùi gian ho√†n v·ªën): {metrics['PP']:.2f} nƒÉm
        - DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u): {metrics['DPP']:.2f} nƒÉm
        
        Ph√¢n t√≠ch:
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# --- GIAO DI·ªÜN CH√çNH STREAMLIT ---

# --- Ch·ª©c nƒÉng 1: T·∫£i File Word ---
uploaded_file = st.file_uploader(
    "1. T·∫£i file **Word (.docx)** ch·ª©a Ph∆∞∆°ng √°n Kinh doanh:",
    type=['docx']
)

# Kh·ªüi t·∫°o state ƒë·ªÉ l∆∞u d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t
if 'extracted_data' not in st.session_state:
    st.session_state.extracted_data = None

if uploaded_file is not None:
    # --- Ch·ª©c nƒÉng 1: N√∫t b·∫•m Tr√≠ch xu·∫•t D·ªØ li·ªáu ---
    if st.button("Tr√≠ch xu·∫•t D·ªØ li·ªáu b·∫±ng AI ü§ñ"):
        with st.spinner('ƒêang ƒë·ªçc file Word v√† y√™u c·∫ßu AI tr√≠ch xu·∫•t d·ªØ li·ªáu...'):
            extracted_data, message = extract_data_from_docx(uploaded_file, API_KEY)
            
            if extracted_data:
                st.session_state.extracted_data = extracted_data
                st.success(message)
                st.toast("Tr√≠ch xu·∫•t th√†nh c√¥ng!", icon="‚úÖ")
            else:
                st.error(f"Tr√≠ch xu·∫•t th·∫•t b·∫°i: {message}")
                st.session_state.extracted_data = None


# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ Tr√≠ch xu·∫•t v√† C√°c b∆∞·ªõc ti·∫øp theo ---
if st.session_state.extracted_data:
    data = st.session_state.extracted_data
    
    st.subheader("2. D·ªØ li·ªáu Tr√≠ch xu·∫•t t·ª´ AI")
    col_v, col_t, col_wacc = st.columns(3)
    with col_v:
        st.metric("V·ªën ƒê·∫ßu t∆∞ Ban ƒë·∫ßu", f"{data['V·ªën ƒë·∫ßu t∆∞']:,.0f}")
    with col_t:
        st.metric("D√≤ng ƒë·ªùi D·ª± √°n (NƒÉm)", f"{data['D√≤ng ƒë·ªùi d·ª± √°n']}")
    with col_wacc:
        st.metric("WACC (T·ª∑ su·∫•t chi·∫øt kh·∫•u)", f"{data['WACC'] * 100:.2f}%")
        
    st.markdown("---")
    
    # Tr√¨nh b√†y Doanh thu v√† Chi ph√≠
    st.info(f"**Doanh thu/Chi ph√≠:** D·ª± √°n c√≥ d√≤ng ƒë·ªùi **{data['D√≤ng ƒë·ªùi d·ª± √°n']}** nƒÉm. ƒê√£ tr√≠ch xu·∫•t {len(data['Doanh thu h√†ng nƒÉm'])} gi√° tr·ªã Doanh thu v√† {len(data['Chi ph√≠ ho·∫°t ƒë·ªông'])} gi√° tr·ªã Chi ph√≠.")
    
    df_params = pd.DataFrame({
        'NƒÉm': np.arange(1, data['D√≤ng ƒë·ªùi d·ª± √°n'] + 1),
        'Doanh thu (A)': data['Doanh thu h√†ng nƒÉm'],
        'Chi ph√≠ Hƒê (B)': data['Chi ph√≠ ho·∫°t ƒë·ªông'],
        'Kh·∫•u hao (C)': [data['Kh·∫•u hao']] * data['D√≤ng ƒë·ªùi d·ª± √°n']
    }).set_index('NƒÉm')
    
    st.dataframe(df_params.style.format('{:,.0f}'), use_container_width=True)

    # --- Ch·ª©c nƒÉng 2: X√¢y d·ª±ng B·∫£ng D√≤ng Ti·ªÅn ---
    st.subheader("3. B·∫£ng D√≤ng ti·ªÅn R√≤ng (Cash Flow Table)")
    
    # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu tr∆∞·ªõc khi t√≠nh to√°n
    if (data['D√≤ng ƒë·ªùi d·ª± √°n'] == len(data['Doanh thu h√†ng nƒÉm']) == len(data['Chi ph√≠ ho·∫°t ƒë·ªông'])):
        try:
            df_cf, df_full = build_cash_flow_table(data)
            
            # T√≠nh D√≤ng ti·ªÅn t√≠ch l≈©y v√† D√≤ng ti·ªÅn chi·∫øt kh·∫•u
            df_full['D√≤ng ti·ªÅn R√≤ng (CF)'].name = 'D√≤ng ti·ªÅn R√≤ng (CF)'
            df_cf['D√≤ng ti·ªÅn R√≤ng (CF)'] = df_full['D√≤ng ti·ªÅn R√≤ng (CF)']
            df_cf['CF T√≠ch l≈©y'] = df_cf['D√≤ng ti·ªÅn R√≤ng (CF)'].cumsum()
            
            # Th√™m c·ªôt D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF) v√† DCF t√≠ch l≈©y
            discount_factors = 1 / (1 + data['WACC'])**np.arange(data['D√≤ng ƒë·ªùi d·ª± √°n'] + 1)
            df_cf['D√≤ng ti·ªÅn Chi·∫øt kh·∫•u (DCF)'] = df_cf['D√≤ng ti·ªÅn R√≤ng (CF)'] * discount_factors
            df_cf['DCF T√≠ch l≈©y'] = df_cf['D√≤ng ti·ªÅn Chi·∫øt kh·∫•u (DCF)'].cumsum()
            
            st.dataframe(df_cf.style.format('{:,.0f}'), use_container_width=True)
            
            # --- Ch·ª©c nƒÉng 3: T√≠nh to√°n C√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£ ---
            st.subheader("4. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
            metrics = calculate_project_metrics(df_cf, data['WACC'])
            
            # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë
            col_npv, col_irr, col_pp, col_dpp = st.columns(4)
            with col_npv:
                st.metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)", f"{metrics['NPV']:,.0f}")
            with col_irr:
                st.metric("IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)", f"{metrics['IRR'] * 100:.2f}%")
            with col_pp:
                st.metric("PP (Th·ªùi gian ho√†n v·ªën)", f"{metrics['PP']:.2f} nƒÉm")
            with col_dpp:
                st.metric("DPP (Th·ªùi gian ho√†n v·ªën CK)", f"{metrics['DPP']:.2f} nƒÉm")
            
            st.markdown("---")
            
            # --- Ch·ª©c nƒÉng 4: Ph√¢n t√≠ch AI ---
            st.subheader("5. Nh·∫≠n x√©t Ph√¢n t√≠ch t·ª´ AI (Task 4)")
            if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë üß†"):
                with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                    ai_result = analyze_metrics(metrics, data['D√≤ng ƒë·ªùi d·ª± √°n'], data['WACC'], API_KEY)
                    st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                    st.info(ai_result)
            
        except Exception as e:
            st.error(f"L·ªói x·∫£y ra trong qu√° tr√¨nh t√≠nh to√°n: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu tr√≠ch xu·∫•t.")
            
    else:
        st.warning("D·ªØ li·ªáu tr√≠ch xu·∫•t kh√¥ng h·ª£p l·ªá: S·ªë nƒÉm c·ªßa Doanh thu/Chi ph√≠ ph·∫£i b·∫±ng D√≤ng ƒë·ªùi D·ª± √°n.")

else:
    st.info("T·∫£i file Word l√™n v√† b·∫•m n√∫t **Tr√≠ch xu·∫•t D·ªØ li·ªáu b·∫±ng AI ü§ñ** ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
